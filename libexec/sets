#!/usr/bin/python

def intersect(*sets):
    sets = list(sets)

    s2 = sets.pop(0)
    for s in sets:
        s2 = s2.intersection(s)

    return s2

def union(*sets):
    sets = list(sets)

    s2 = sets.pop(0)
    for s in sets:
        s2 = s2.union(s)

    return s2

def difference(*sets):
    sets = list(sets)

    s2 = sets.pop(0)
    for s in sets:
        s2 = s2.difference(s)

    return s2

functions = {
    '&' : intersect,
    '|' : union,
    '!' : difference,
}

def setparser(equation, **sets):
    opque = list()
    lfni = list()
    unresolved = set()
    j = 0
    for i in range(len(equation)):
        c = equation[i]

        if c in functions.keys():
            lfni.append(len(opque))
            opque.append(functions[c])
            assert(equation[i+1] == '(')
            j = i + 2
        elif c == ',':
            token = equation[j:i]
            if token in sets.keys():
                opque.append(sets[token])
            elif token:
                unresolved.add(token)
            j = i + 1
        elif c == ')':
            token = equation[j:i]
            if token in sets.keys():
                opque.append(sets[token])
            elif token:
                unresolved.add(token)


            if len(unresolved) == 0:
                fni = lfni.pop()
                fn = opque[fni]
                args = tuple(opque[fni+1:])
                opque = opque[:fni]
                opque.append(fn(*args))
            j = i + 1

    return unresolved and unresolved or opque.pop()

if __name__ == '__main__':
    import sys, time, select

    e=1
    if len(sys.argv) == 2:
        sets = {}
        active = None
        equation = sys.argv[1]
        if equation[0] in functions.keys() and equation.count('(') == equation.count(')'):
            #. If data on stdin:
            if select.select([sys.stdin,],[],[],0.0)[0]:
                while True:
                    token = sys.stdin.readline().strip()
                    if equation is not None:
                        if token:
                            if active is not None:
                                sets[active].add(token)
                            else:
                                active = token
                                sets[active]=set()
                        else:
                            if active is not None:
                                active = None
                            else:
                                break
                    else:
                        equation = token

            print ' '.join(setparser(equation, **sets))
            e=0

    exit(e)
